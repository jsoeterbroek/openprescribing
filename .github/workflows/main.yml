name: "OpenPrescribing CI"

on: [ pull_request ]

jobs:
  # unit_test:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Retrieve Google Cloud credentials
  #       run: ./.github/scripts/decrypt_secret.sh
  #       env:
  #         GOOGLE_CLOUD_GITHUB_ACTIONS_PASSPHRASE: ${{ secrets.GOOGLE_CLOUD_GITHUB_ACTIONS_PASSPHRASE }}
  #     - name: Generate SAUCE_HOST
  #       run: |
  #         echo "::set-env name=SAUCE_HOST::$(ip -4 addr show scope global dev docker0 | grep inet | awk '{print $2}' | cut -d / -f 1)"
  #     - name: Unit tests
  #       run: docker-compose run --service-ports test && docker-compose run --service-ports test-production
  #       env:
  #         TEST_SUITE: nonfunctional
  #     - name: Notify slack failure
  #       if: failure()
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  #       uses: voxmedia/github-action-slack-notify-build@v1
  #       with:
  #         channel: technoise
  #         status: "FAILURE (unit_test)"
  #         color: danger

  functional_tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Retrieve Google Cloud credentials
        run: ./.github/scripts/decrypt_secret.sh
        env:
          GOOGLE_CLOUD_GITHUB_ACTIONS_PASSPHRASE: ${{ secrets.GOOGLE_CLOUD_GITHUB_ACTIONS_PASSPHRASE }}
      - name: 'BrowserStack Env Setup'
        uses: 'browserstack/github-actions/setup-env@master'
        with:
          username:  ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          build-name: BUILD_INFO
          project-name: REPO_NAME
      - name: 'BrowserStackLocal Setup'
        uses: 'browserstack/github-actions/setup-local@master'
        with:
          local-testing: start
          local-identifier: random
          local-logging-level: all-logs 
      - name: Functional tests
        run: docker-compose run --service-ports test && docker-compose run --service-ports test-production
        env:
          TEST_SUITE: functional
          BROWSER: "IE:11.0:Windows:7"
      - name: 'BrowserStackLocal Stop'
        uses: 'browserstack/github-actions/setup-local@master'
        with:
          local-testing: stop

  # ansible_buildout_test:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Ansible buildout test
  #       run: docker run -v ${GITHUB_WORKSPACE}:/openprescribing/ dockette/stretch /bin/bash -c "cd /openprescribing/ansible && bash test_playbook.sh"
  #       env:
  #         LANG: en_US.UTF-8
  #     - name: Notify slack failure
  #       if: failure()
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  #       uses: voxmedia/github-action-slack-notify-build@v1
  #       with:
  #         channel: technoise
  #         status: "FAILURE (ansible)"
  #         color: danger
  #
  # linting:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Setup Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.6'
  #     - name: "Linting"
  #       run: |
  #         pip install black==19.3b0
  #         pip install flake8==3.7.8
  #         scripts/lint.sh
  #     - name: Notify slack failure
  #       if: failure()
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  #       uses: voxmedia/github-action-slack-notify-build@v1
  #       with:
  #         channel: technoise
  #         status: "FAILURE (linting)"
  #         color: danger
  # 
  # notify_slack:
  #   runs-on: ubuntu-latest
  #   needs: [ unit_test , ansible_buildout_test, linting ]
  #
  #   steps:
  #     - name: Notify slack success
  #       env:
  #         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  #       uses: voxmedia/github-action-slack-notify-build@v1
  #       with:
  #         channel: technoise
  #         status: SUCCESS
  #         color: good
